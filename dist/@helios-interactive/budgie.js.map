{"version":3,"sources":["budgie.concat.js"],"names":["imageExtensions","videoExtensions","BudgieDom","Object","create","setupBudgieContainer","budgie","parentContainer","classList","add","budgieId","budgieFlexContainer","document","createElement","appendChild","setupBudgieCSS","eleWidth","parseInt","window","getComputedStyle","budgieContainer","width","numOfSheets","styleSheets","cssRules","length","numberAcross","options","numberHigh","numberWide","height","insertRule","i","direction","setupBudgieScrollProperties","scrollProperty","budgieElement","measureElementWidthAndHeight","budgieElementMeasure","isHorizontal","addEventListener","onScroll","insertBudgieElements","items","forEach","item","id","hasOddEnding","numberLeftWithOddEnding","createBudgieFillerElement","createBudgieElement","fitsInContainer","blankEle","filler","itemIndex","element","innerDiv","convertItemToElement","innerHTML","outerHTML","console","log","Error","extension","match","substr","includes","src","selector","measure","elementComputedStyle","querySelector","parseFloat","Budgie","assign","constructor","defaultOptions","Math","floor","random","self","pop","a","Array","prototype","apply","arguments","popItem","push","pushItem","shift","shiftItem","unshift","unshiftItem","splice","updateAllElements","budgieSetup","autoStart","budgieAnimate","elementsOnScreen","budgieElementMeasurement","undefined","scrollContainerSize","isVertical","getElementsByClassName","ceil","addLastItem","updateBeginningAndEndingItems","clearMeasurements","removeLastItem","updateExistingItems","elementCount","querySelectorAll","realElements","from","insertAdjacentElement","slice","reverse","ele","cloneNode","elementsToDupe","eleIndex","elements","parentNode","removeChild","newElement","index","insertBefore","nextSibling","method","updateListStart","updateListEnding","numberAtTop","dupedElements","topOfDupedElements","lastRowOfRealElements","firstRealElement","numberOff","redraw","operator","lastElements","firstElements","lastElement","firstElement","remove","appendEndingItems","scrollDirection","scrollSizeMeasurement","infiniteScroll","prependStartingItems","autoScroll","fps","currentScroll","budgieContainerMeasurements","viewMeasure","scrollSpeed","secondsOnPage","stopAnimate","interval","setInterval","parentElement","inverted","clearInterval","global"],"mappings":"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","file":"budgie.js","sourcesContent":["'use strict';\r\n\r\nconst imageExtensions = ['jpg', 'gif', 'png'];\r\nconst videoExtensions = ['mp4','ogg', 'webm'];\r\n/**\r\n * BudgieDomSetup\r\n * This class handles tasks that involve interacting with the DOM at setup\r\n */\r\nconst BudgieDom = Object.create({\r\n  /**\r\n   * Creates the container inside the passed in element that allows for scrolling\r\n   * @param budgie\r\n   * @returns {Element} returns the budgie container\r\n   */\r\n  setupBudgieContainer : (budgie) => {\r\n    budgie.parentContainer.classList.add(`budgie-flex-container-parent`);\r\n    budgie.parentContainer.classList.add(`budgie-flex-container-parent-${budgie.budgieId}`);\r\n\r\n    let budgieFlexContainer = document.createElement('div');\r\n    budgieFlexContainer.classList.add('budgie-flex-container');\r\n    budgieFlexContainer.classList.add(`budgie-container-${budgie.budgieId}`);\r\n    budgie.parentContainer.appendChild(budgieFlexContainer);\r\n\r\n    return budgieFlexContainer;\r\n  },\r\n\r\n  /**\r\n   * Create CSS classes for budgie items\r\n   * @param budgie\r\n   */\r\n  setupBudgieCSS : (budgie) => {\r\n    // Width of budgie container\r\n    const eleWidth = parseInt(window.getComputedStyle(budgie.budgieContainer).width);\r\n\r\n    let numOfSheets = 0;\r\n\r\n    // If there are already cssRules declared, then set the correct number of sheets to allow for addition\r\n    if(document.styleSheets[0].cssRules) {\r\n      numOfSheets = document.styleSheets[0].cssRules.length;\r\n    }\r\n\r\n    // Take the larger of the two as the number across\r\n    const numberAcross = budgie.options.numberHigh >= budgie.options.numberWide ?\r\n      budgie.options.numberHigh : budgie.options.numberWide;\r\n\r\n    // Width in %\r\n    const width = ((eleWidth / budgie.options.numberWide / eleWidth) * 100);\r\n    // Height in %\r\n    const height = (100 / budgie.options.numberHigh);\r\n\r\n    // Set the width and height of a single budgie element\r\n    document.styleSheets[0].insertRule(\r\n      `.budgie-flex-item-${budgie.budgieId}{width: ${width}%; height: ${height}%;}`, numOfSheets\r\n    );\r\n\r\n    // Create CSS rules for all possible configurations of filler elements\r\n    for(let i = numberAcross - 1; i >= 0; i--){\r\n      document.styleSheets[0].insertRule(\r\n        `.budgie-flex-item-${budgie.budgieId}--filler-${i}\r\n        {\r\n          width: ${width*(budgie.options.numberWide - i)/2}%; \r\n          height: ${height*(budgie.options.numberHigh - i)/2}%; flex-grow: 1;\r\n        }`,\r\n        numOfSheets\r\n      );\r\n    }\r\n\r\n    // Get the flex direction based on the budgie direction\r\n    let direction = budgie.options.direction === 'horizontal' ? 'column' : 'row';\r\n    // Set flex direction\r\n    document.styleSheets[0].insertRule(\r\n      `.budgie-container-${budgie.budgieId}{flex-direction: ${direction};}`,\r\n      numOfSheets\r\n    );\r\n\r\n    // Set the overflow properties based on the budgie direction\r\n    document.styleSheets[0].insertRule(\r\n      `.budgie-flex-container-parent-${budgie.budgieId}\r\n      {\r\n        overflow-x: ${budgie.options.direction === 'horizontal' ? 'scroll' : 'hidden'}; \r\n        overflow-y: ${budgie.options.direction === 'vertical' ? 'scroll' : 'hidden'}\r\n      }`,\r\n      numOfSheets\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Sets the scroll properties based on the direction of budgie, and element size\r\n   * @param budgie\r\n   */\r\n  setupBudgieScrollProperties : (budgie) => {\r\n    // Get the scroll property (scrollTop or scrollLeft)\r\n    let scrollProperty = budgie.scrollProperty();\r\n\r\n    // Get a single budgie element's measure\r\n    let budgieElement = BudgieDom.measureElementWidthAndHeight(`.budgie-flex-item-${budgie.budgieId}`);\r\n\r\n    // Use width or height based on budgie direction\r\n    let budgieElementMeasure = budgie.isHorizontal() ? budgieElement.width : budgieElement.height;\r\n\r\n    // Set the scroll position to the top of the non-duped elements\r\n    budgie.parentContainer[scrollProperty] = budgieElementMeasure;\r\n\r\n    // Bind an event listener to the scroll event\r\n    budgie.parentContainer.addEventListener(\"scroll\", function(){budgie.onScroll(scrollProperty)});\r\n  },\r\n\r\n  /**\r\n   * Inserts the budgie elements. This should only be used during first setup\r\n   * @param budgie\r\n   */\r\n  insertBudgieElements : (budgie) => {\r\n    budgie.items.forEach((item, id) => {\r\n      // Add a filler item before the odd ending elements\r\n      // so that odd ending lists will have a centered ending\r\n      if(budgie.hasOddEnding() && (budgie.items.length - budgie.numberLeftWithOddEnding() === id)){\r\n        budgie.budgieContainer.appendChild(BudgieDom.createBudgieFillerElement(budgie));\r\n      }\r\n\r\n      // Add the item\r\n      budgie.budgieContainer.appendChild(BudgieDom.createBudgieElement(budgie, item, id));\r\n\r\n      // Add a filler item after the odd ending elements\r\n      // so that odd ending lists will have a centered ending\r\n      if(budgie.hasOddEnding() > 0 && (budgie.items.length === id + 1)){\r\n        budgie.budgieContainer.appendChild(BudgieDom.createBudgieFillerElement(budgie));\r\n      }\r\n    });\r\n\r\n    // If all the elements fit without scrolling, then add an extra div to allow for updates later\r\n    if(budgie.fitsInContainer()){\r\n      let blankEle = document.createElement('div');\r\n      blankEle.classList.add(`budgie-flex-item-${budgie.budgieId}--blank`);\r\n      budgie.budgieContainer.appendChild(blankEle);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Creates a filler element with the class based on the number of left over budgie elements\r\n   * @param budgie\r\n   * @returns {Element}\r\n   */\r\n  createBudgieFillerElement : (budgie) => {\r\n    let filler = document.createElement('div');\r\n    filler.classList.add(`budgie-flex-item-${budgie.budgieId}--filler`);\r\n    filler.classList.add(`budgie-flex-item-${budgie.budgieId}--filler-${budgie.numberLeftWithOddEnding()}`);\r\n    return filler;\r\n  },\r\n\r\n  /**\r\n   * Creates a budgie element, and returns that element for use.\r\n   * @param budgie\r\n   * @param item\r\n   * @param itemIndex\r\n   * @returns {Element}\r\n   */\r\n  createBudgieElement : (budgie, item, itemIndex) => {\r\n    let element = document.createElement('div');\r\n\r\n    element.classList.add('budgie-flex-item');\r\n    element.classList.add(`budgie-flex-item-${budgie.budgieId}`);\r\n    element.classList.add(`budgie-${budgie.budgieId}-${itemIndex}`);\r\n\r\n    const innerDiv = BudgieDom.convertItemToElement(item)\r\n\r\n    element.innerHTML = innerDiv.outerHTML;\r\n\r\n    return element;\r\n  },\r\n\r\n  /**\r\n   * Will convert an item to a element so that it can be used in a budgie element\r\n   * @param item\r\n   * @returns {*}\r\n   */\r\n  convertItemToElement : (item) => {\r\n    // If the item is a dom element, then return it\r\n    console.log(item)\r\n    if(typeof item === 'object' ) return item;\r\n\r\n    if(typeof item !== 'string') throw new Error('Only DOM Elements and strings are accepted as budgie items')\r\n\r\n    let extension = item.match(/\\.{1}\\w*$/)\r\n    if(extension) {\r\n      extension = extension[0].substr(1)\r\n    }\r\n\r\n    let element;\r\n    if(imageExtensions.includes(extension)) {\r\n      element = document.createElement('img');\r\n      element.src = item\r\n    } else if(videoExtensions.includes(extension)) {\r\n      element = document.createElement('video');\r\n      element.src = item\r\n    }\r\n\r\n    if(!element) throw new Error(`Extension of: ${extension} is not supported.`)\r\n\r\n    return element;\r\n  },\r\n\r\n  /**\r\n   * Returns the height and width measurements of the first element matching the given selector\r\n   * @param selector\r\n   * @returns {{}}\r\n   */\r\n  measureElementWidthAndHeight : (selector) => {\r\n    let measure = {};\r\n    const elementComputedStyle = window.getComputedStyle(document.querySelector(selector));\r\n    measure.height = parseFloat(elementComputedStyle.height);\r\n    measure.width = parseFloat(elementComputedStyle.width);\r\n    return measure;\r\n  },\r\n});;'use strict';\r\n\r\nclass Budgie {\r\n  /**\r\n   *\r\n   * @param items\r\n   * @param selector\r\n   * @param options\r\n   */\r\n  constructor(items, selector, options = {}) {\r\n    // Set the parentContainer to be accessable\r\n    this.parentContainer = document.querySelector(selector);\r\n    // Apply user options over the default options\r\n    this.options = Object.assign(this.constructor.defaultOptions(), options);\r\n    // Sets a random ID to allow for multiple budgies at once\r\n    this.budgieId = Math.floor((1 + Math.random()) * 0x10000);\r\n    // save a reference to the items array\r\n    this.items = items;\r\n\r\n    // Provide methods for manipulating the items array\r\n    var self = this;\r\n    this.items.pop = function(){\r\n      let a = Array.prototype.pop.apply(self.items, arguments);\r\n      self.popItem();\r\n      return a;\r\n    };\r\n    this.items.push = function(){\r\n      let a = Array.prototype.push.apply(self.items, arguments);\r\n      self.pushItem();\r\n      return a;\r\n    };\r\n    this.items.shift = function(){\r\n      let a = Array.prototype.shift.apply(self.items, arguments);\r\n      self.shiftItem();\r\n      return a;\r\n    };\r\n    this.items.unshift = function(){\r\n      let a = Array.prototype.unshift.apply(self.items, arguments);\r\n      self.unshiftItem();\r\n      return a;\r\n    };\r\n    this.items.splice = function(){\r\n      let a = Array.prototype.splice.apply(self.items, arguments);\r\n      self.updateAllElements();\r\n      return a;\r\n    };\r\n\r\n    // Gets the budgie scroller setup for use\r\n    this.budgieSetup();\r\n\r\n    // Will start the scrolling animation if autoStart is true\r\n    if (this.options.autoStart) {\r\n      this.budgieAnimate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default budgie options are defined here\r\n   * @returns {{numberHigh: number, numberWide: number, direction: string, secondsOnPage: number, inverted: boolean, autoScroll: boolean, fps: number, infiniteScroll: boolean, autoStart: boolean}}\r\n   */\r\n  static defaultOptions() {\r\n    return {\r\n      'numberHigh': 1,\r\n      'numberWide': 1,\r\n      'direction': 'vertical',\r\n      'secondsOnPage': 1.0,\r\n      'inverted': false,\r\n      'autoScroll': true,\r\n      'fps': 60,\r\n      'infiniteScroll': true,\r\n      'autoStart': true\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Will return true if budgie has vertical direction\r\n   * @returns {boolean}\r\n   */\r\n  isVertical() {\r\n    return this.options.direction === 'vertical';\r\n  }\r\n\r\n  /**\r\n   * Will return true if budgie has horizontal direction\r\n   * @returns {boolean}\r\n   */\r\n  isHorizontal() {\r\n    return this.options.direction === 'horizontal';\r\n  }\r\n\r\n  /**\r\n   * Will be true if the last column/row is not completely full\r\n   * @returns {boolean}\r\n   */\r\n  hasOddEnding() {\r\n    return this.numberLeftWithOddEnding() > 0;\r\n  }\r\n\r\n  /**\r\n   * Will return the number of elements that can fit in the budgie container\r\n   * @returns {number}\r\n   */\r\n  elementsOnScreen(){\r\n    return parseInt(this.options.numberHigh) * parseInt(this.options.numberWide);\r\n  }\r\n\r\n  /**\r\n   * Will be true if all budgie elements fit into container without scrolling\r\n   * @returns {boolean}\r\n   */\r\n  fitsInContainer() {\r\n    return this.items.length <= this.elementsOnScreen();\r\n  }\r\n\r\n  /**\r\n   * Will return the number of elements left on the last line.\r\n   * Will return 0 if the last line is full\r\n   * @returns {number}\r\n   */\r\n  numberLeftWithOddEnding(){\r\n    let numberAcross = this.isHorizontal() ? this.options.numberHigh : this.options.numberWide;\r\n    return (this.items.length % numberAcross);\r\n  }\r\n\r\n  /**\r\n   * Clears out measurements so that they will be remeasured\r\n   */\r\n  clearMeasurements(){\r\n    this.budgieElementMeasurement = undefined;\r\n    this.scrollContainerSize = undefined;\r\n  }\r\n\r\n  /**\r\n   * Will return the scroll property ('scrollTop' or 'scrollLeft') of the budgie instance\r\n   * @returns {String} The scroll property ('scrollTop' or 'scrollLeft') of the budgie instance\r\n   */\r\n  scrollProperty() {\r\n    if (this.isVertical()) {\r\n      return 'scrollTop';\r\n    } else if (this.isHorizontal()) {\r\n      return 'scrollLeft';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the height and width measurements of the elements associated with the given selector\r\n   * @param selector\r\n   * @returns {{}} The height and width measurements of the element associated with the given selector.\r\n   */\r\n  elementMeasurement(selector){\r\n    let measure = {};\r\n    measure.height = parseFloat(window.getComputedStyle(document.getElementsByClassName(selector)[0]).height);\r\n    measure.width = parseFloat(window.getComputedStyle(document.getElementsByClassName(selector)[0]).width);\r\n    return measure;\r\n  }\r\n\r\n  /**\r\n   * Returns the size of the scroll container for this budgie instance\r\n   * @returns {number} Measurement in px.\r\n   */\r\n  scrollSizeMeasurement(){\r\n    switch(this.options.direction){\r\n      case 'vertical':\r\n        return BudgieDom.measureElementWidthAndHeight(`.budgie-flex-item-${this.budgieId}`).height * (Math.ceil(this.items.length/this.options.numberWide));\r\n        break;\r\n      case 'horizontal':\r\n        return BudgieDom.measureElementWidthAndHeight(`.budgie-flex-item-${this.budgieId}`).width * (Math.ceil(this.items.length/this.options.numberHigh));\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the budgie instance based on array changes\r\n   */\r\n  pushItem(){\r\n    this.addLastItem();\r\n    this.updateBeginningAndEndingItems('add');\r\n    this.clearMeasurements();\r\n    this.budgieAnimate();\r\n  }\r\n\r\n  /**\r\n   * Updates the budgie instance based on array changes\r\n   */\r\n  popItem(){\r\n    this.removeLastItem();\r\n    this.updateBeginningAndEndingItems('remove');\r\n    this.clearMeasurements();\r\n    this.budgieAnimate();\r\n  }\r\n\r\n  /**\r\n   * Updates the budgie instance based on array changes\r\n   */\r\n  shiftItem(){\r\n    this.updateExistingItems()\r\n    this.removeLastItem();\r\n    this.updateBeginningAndEndingItems('remove');\r\n    this.clearMeasurements();\r\n    this.budgieAnimate();\r\n  }\r\n\r\n  /**\r\n   * Updates the budgie instance based on array changes\r\n   */\r\n  unshiftItem(){\r\n    this.updateExistingItems()\r\n    this.addLastItem();\r\n    this.updateBeginningAndEndingItems('add');\r\n    this.clearMeasurements();\r\n    this.budgieAnimate();\r\n  }\r\n\r\n  /**\r\n   * Updates the budgie instance based on array changes\r\n   */\r\n  updateAllElements(){\r\n    let elementCount = document.querySelectorAll(`.budgie-flex-item-${this.budgieId}:not(.budgie-flex-item-${this.budgieId}--duplicate)`).length\r\n    if(this.items.length > elementCount){\r\n      for(let i = elementCount; i < this.items.length; i++){\r\n        this.addLastItem(i, i - 1);\r\n      }\r\n      this.updateBeginningAndEndingItems('add', true);\r\n    } else if (this.items.length < elementCount) {\r\n      for(let i = elementCount; i > this.items.length; i--){\r\n        this.removeLastItem(i-1);\r\n      }\r\n      this.updateBeginningAndEndingItems('remove', true);\r\n    }\r\n    this.updateExistingItems();\r\n    this.clearMeasurements();\r\n    this.budgieAnimate();\r\n  }\r\n\r\n  /**\r\n   * Prepends duplicate items equal to the last row/column of items\r\n   */\r\n  prependStartingItems(){\r\n    let elementsOnScreen = this.elementsOnScreen();\r\n    // Store a list of the non duplicated elements\r\n    const realElements = Array.from(document.querySelectorAll(`.budgie-flex-item-${this.budgieId}:not(.budgie-flex-item-${this.budgieId}--duplicate)`));\r\n\r\n    // If the number of elements is greater than the number that fit in the given area\r\n    if(!this.fitsInContainer){\r\n      // Prepends duplicate items equal to the number of elementsOnScreen\r\n      if(this.hasOddEnding()) {\r\n        // The column or row is NOT full, fillers are needed\r\n        // Add a filler item so that odd ending lists will have a centered ending\r\n        this.budgieContainer.insertAdjacentElement('afterbegin', BudgieDom.createBudgieFillerElement(this));\r\n\r\n        // Add the duplicated elements\r\n        realElements.slice(\r\n          realElements.length - this.numberLeftWithOddEnding(),\r\n          realElements.length\r\n        )\r\n          .reverse()\r\n          .forEach((element) => {\r\n            let ele = element.cloneNode(true);\r\n            ele.classList.add(`budgie-flex-item-${this.budgieId}--duplicate`);\r\n            this.budgieContainer.insertAdjacentElement('afterbegin', ele);\r\n          });\r\n\r\n        // Add a filler item so that odd ending lists will have a centered ending\r\n        this.budgieContainer.insertAdjacentElement('afterbegin', BudgieDom.createBudgieFillerElement(this));\r\n      } else {\r\n        // The column or row is full, not fillers needed\r\n        let elementsToDupe = this.isHorizontal() ? this.options.numberHigh : this.options.numberWide;\r\n\r\n        // Add the duplicated elements\r\n        realElements.slice(\r\n          realElements.length - elementsToDupe,\r\n          realElements.length\r\n        )\r\n          .reverse()\r\n          .forEach((element) => {\r\n            let ele = element.cloneNode(true);\r\n            ele.classList.add(`budgie-flex-item-${this.budgieId}--duplicate`);\r\n            this.budgieContainer.insertAdjacentElement('afterbegin', ele);\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends duplicate items equal to the number that fit in the view (numberHigh * numberWide)\r\n   */\r\n  appendEndingItems(){\r\n    let elementsOnScreen = this.elementsOnScreen();\r\n    // Store a list of the non duplicated elements\r\n    const realElements = Array.from(document.querySelectorAll(`.budgie-flex-item-${this.budgieId}:not(.budgie-flex-item-${this.budgieId}--duplicate)`));\r\n\r\n    // If the number of elements is greater than the number that fit in the given area\r\n    if(!this.fitsInContainer()){\r\n      // Appends duplicate items equal to the number of elementsOnScreen\r\n      realElements.slice(\r\n        0,\r\n        elementsOnScreen\r\n      )\r\n        .forEach((element) => {\r\n          let ele = element.cloneNode(true);\r\n          ele.classList.add(`budgie-flex-item-${this.budgieId}--duplicate`);\r\n          ele.classList.add(`budgie-flex-item-${this.budgieId}--duplicate-ending`);\r\n          this.budgieContainer.insertAdjacentElement('beforeend', ele);\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an item from the end of the budgie list\r\n   * @param eleIndex\r\n   */\r\n  removeLastItem(eleIndex = this.items.length){\r\n    let elements = document.getElementsByClassName(`budgie-${this.budgieId}-${eleIndex}`);\r\n    Array.from(elements).forEach(element => {\r\n      element.parentNode.removeChild(element);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds an item to the end of the budgie list\r\n   * @param itemIndex\r\n   * @param eleIndex\r\n   */\r\n  addLastItem(itemIndex = this.items.length - 1, eleIndex = this.items.length - 2){\r\n    // eleIndex; subtract 2 to account for using length not index, and also to get the last element before the push\r\n    let elements = document.getElementsByClassName(`budgie-${this.budgieId}-${eleIndex}`);\r\n    if(!elements.length > 0){\r\n      elements = document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--blank`)\r\n    }\r\n    console.log(this.items[itemIndex], itemIndex)\r\n    let newElement = BudgieDom.createBudgieElement(this, this.items[itemIndex], itemIndex);\r\n    // Insert at the end of the main list\r\n    // We use index of 1, because the last few items are duplicated at the top\r\n    let index = 0\r\n    if(elements.length > 1) { index = 1 }\r\n    elements[index].parentNode.insertBefore(newElement, elements[index].nextSibling);\r\n  }\r\n\r\n  /**\r\n   * Updates the existing items by replacing their html\r\n   */\r\n  updateExistingItems(){\r\n    this.items.forEach((item, index) => {\r\n      Array.from(document.getElementsByClassName(`budgie-${this.budgieId}-${index}`)).forEach((element) => {\r\n        // If the element has changed then update, otherwise do nothing\r\n        console.log(item)\r\n        let newElement = BudgieDom.createBudgieElement(this, item, index).outerHTML;\r\n        if (element.outerHTML !== newElement) {\r\n          element.outerHTML = newElement;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls both updateListStart and updateListEnding in the correct order\r\n   * @param method\r\n   */\r\n  updateBeginningAndEndingItems(method) {\r\n    this.updateListStart();\r\n    this.updateListEnding(method);\r\n  }\r\n\r\n  /**\r\n   * Updates the duplicated elements that come before the real budgie elements\r\n   */\r\n  updateListStart() {\r\n    let numberAtTop;\r\n    if (this.hasOddEnding()) {\r\n      numberAtTop = this.numberLeftWithOddEnding();\r\n    } else {\r\n      numberAtTop = this.isHorizontal() ? this.options.numberHigh : this.options.numberWide;\r\n    }\r\n\r\n    let realElements = Array.from(document.querySelectorAll(`.budgie-flex-item-${this.budgieId}:not(.budgie-flex-item-${this.budgieId}--duplicate)`));\r\n\r\n    // Trim the number of elements across one row to get rid of the bottom dupes\r\n    let dupedElements = Array.from(document.querySelectorAll(`.budgie-flex-item-${this.budgieId}.budgie-flex-item-${this.budgieId}--duplicate`));\r\n    let topOfDupedElements = dupedElements.slice(0, dupedElements.length - this.elementsOnScreen());\r\n\r\n    // These elements should become the new duped top row\r\n    let lastRowOfRealElements = realElements.slice(realElements.length - numberAtTop, realElements.length);\r\n\r\n    const firstRealElement = realElements[0];\r\n\r\n\r\n    // If there are more existing elements than we need, then trim that list\r\n    if(topOfDupedElements.length > lastRowOfRealElements.length) {\r\n      let numberOff = topOfDupedElements.length - lastRowOfRealElements.length\r\n\r\n      for(let i = 0; i < numberOff; i += 1) {\r\n        topOfDupedElements[i].parentNode.removeChild(topOfDupedElements[i]);\r\n        topOfDupedElements.shift();\r\n      }\r\n    }\r\n\r\n    // Exit early if the list is not long enough to scroll\r\n    if(this.fitsInContainer()){ return; }\r\n\r\n    // Update the existing elements, and add new if needed\r\n    lastRowOfRealElements.forEach((element, index) => {\r\n      let ele = element.cloneNode(true);\r\n      ele.classList.add(`budgie-flex-item-${this.budgieId}--duplicate`);\r\n      if(topOfDupedElements[index]){\r\n        topOfDupedElements[index].outerHTML = ele.outerHTML\r\n      } else {\r\n        firstRealElement.parentNode.insertBefore(ele, firstRealElement);\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Updates the Duplicated elements that are on the end of the list.\r\n   * @param method\r\n   * @param redraw\r\n   */\r\n  updateListEnding(method, redraw=false){\r\n    let operator;\r\n    if(method === 'remove'){\r\n      operator = 1\r\n    } else if(method === 'add'){\r\n      // this covers 'add'\r\n      operator = -1\r\n    } else {\r\n      throw new Error(\"Only 'add' and 'remove' are supported arguments\")\r\n    }\r\n\r\n    if(redraw)\r\n      Array.from(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--filler`)).forEach(element =>\r\n        element.parentNode.removeChild(element));\r\n\r\n    if(this.hasOddEnding()){\r\n      if(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--filler`).length === 0) {\r\n        let lastElements = Array.from(document.getElementsByClassName(`budgie-${this.budgieId}-${this.items.length - 1}`));\r\n        let firstElements = Array.from(document.getElementsByClassName(`budgie-${this.budgieId}-${this.items.length - this.numberLeftWithOddEnding()}`));\r\n        // Put fill around all elements that need it. At the top, and the bottom.\r\n        lastElements.forEach(lastElement => {\r\n          lastElement.parentNode.insertBefore(BudgieDom.createBudgieFillerElement(this), lastElement.nextSibling);\r\n        })\r\n        firstElements.forEach(firstElement => {\r\n          firstElement.parentNode.insertBefore(BudgieDom.createBudgieFillerElement(this), firstElement);\r\n        })\r\n      } else {\r\n        Array.from(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--filler`)).forEach((element) => {\r\n          element.classList.remove(`budgie-flex-item-${this.budgieId}--filler-${this.numberLeftWithOddEnding() + operator}`);\r\n          element.classList.add(`budgie-flex-item-${this.budgieId}--filler-${this.numberLeftWithOddEnding()}`);\r\n        });\r\n      }\r\n    } else {\r\n      Array.from(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--filler`)).forEach(element =>\r\n        element.parentNode.removeChild(element));\r\n    }\r\n\r\n    // If all elements fit in the container and scrolling is not needed\r\n    if(this.fitsInContainer()) {\r\n      Array.from(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--duplicate`)).forEach(element =>\r\n        element.parentNode.removeChild(element));\r\n\r\n      // Append an extra div so that new items can be added\r\n      if(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--blank`).length === 0){\r\n        let blankEle = document.createElement('div');\r\n        blankEle.classList.add(`budgie-flex-item-${this.budgieId}--blank`);\r\n        this.budgieContainer.appendChild(blankEle);\r\n      }\r\n    }\r\n\r\n    if(!this.fitsInContainer() && document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--duplicate-ending`).length === 0){\r\n      this.appendEndingItems();\r\n\r\n      Array.from(document.getElementsByClassName(`budgie-flex-item-${this.budgieId}--blank`)).forEach(blankEle =>\r\n        blankEle.parentNode.removeChild(blankEle));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Will reset the budgie elements scrollProperty if it hits a wrap point.\r\n  * @param {string} scrollDirection - The scroll direction of the given budgie instance.\r\n  *   can be 'scrollTop' or 'scrollLeft'\r\n  * @returns undefined\r\n  * */\r\n  onScroll(scrollDirection) {\r\n    if(!this.scrollContainerSize) {\r\n      this.scrollContainerSize = this.scrollSizeMeasurement();\r\n    }\r\n\r\n    if(!this.budgieElementMeasurement) {\r\n      let budgieElement = BudgieDom.measureElementWidthAndHeight(`.budgie-flex-item-${this.budgieId}`);\r\n      this.budgieElementMeasurement = Math.floor(this.isHorizontal() ? budgieElement.width : budgieElement.height);\r\n    }\r\n\r\n    if((this.parentContainer[scrollDirection] >= this.scrollContainerSize + this.budgieElementMeasurement)) {\r\n      this.parentContainer[scrollDirection] = this.budgieElementMeasurement;\r\n    } else if((this.parentContainer[scrollDirection] <= 0 )) {\r\n      this.parentContainer[scrollDirection] = this.scrollContainerSize;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets up the budgie scroller to be ready for use\r\n   */\r\n  budgieSetup() {\r\n    this.budgieContainer = BudgieDom.setupBudgieContainer(this);\r\n    BudgieDom.setupBudgieCSS(this);\r\n    BudgieDom.insertBudgieElements(this);\r\n    // Only append extra items, and bind the scroll event if this is infinite scroll.\r\n    if(this.options.infiniteScroll){\r\n      this.appendEndingItems();\r\n      this.prependStartingItems();\r\n      BudgieDom.setupBudgieScrollProperties(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Controls the scrolling animation when budgie is set to autoscroll\r\n   */\r\n  budgieAnimate() {\r\n    // Will not animate if autoScroll is off\r\n    if(!this.options.autoScroll) { return }\r\n\r\n    // How many times the animation should run per second\r\n    const fps =  this.options.fps;\r\n\r\n    // Will be either scrollTop or scrollLeft\r\n    let scrollDirection = this.scrollProperty();\r\n\r\n    // The current value of the scrollDirection\r\n    let currentScroll;\r\n\r\n    // The measurement of the budgie container\r\n    let budgieContainerMeasurements =\r\n      BudgieDom.measureElementWidthAndHeight(`.budgie-container-${this.budgieId}`);\r\n\r\n    // The axis measurement based on the direction\r\n    let viewMeasure = (this.isHorizontal()) ?\r\n      budgieContainerMeasurements.width : budgieContainerMeasurements.height;\r\n\r\n    // Calculate scrollspeed, this will dictate how far the budgie scroller moves with each frame\r\n    // This must be a whole number > 0 so we round up.\r\n    let scrollSpeed = Math.ceil(viewMeasure / this.options.secondsOnPage / fps);\r\n\r\n    // Clear out any existing animations, which allows for use of this on redraws\r\n    this.stopAnimate();\r\n\r\n    // Only animate if the elements do not all fit in the container\r\n    if(!this.fitsInContainer()){\r\n      this.interval = setInterval(() => {\r\n        // Get the current value of the scroll\r\n        currentScroll = this.budgieContainer.parentElement[scrollDirection];\r\n\r\n        // Add or subtract from the current value based on inverted or not\r\n        this.options.inverted ? (currentScroll += scrollSpeed) : (currentScroll -= scrollSpeed);\r\n\r\n        // Apply the new scroll value\r\n        this.budgieContainer.parentElement[scrollDirection] = currentScroll;\r\n      }, 1000/fps);\r\n    } else {\r\n      // Set the scroll property to 0 if all elements fit in the container\r\n      // This is used when animate is called on a redraw\r\n      this.budgieContainer.parentElement[scrollDirection] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will toggle the inverted property of the Budgie element\r\n   */\r\n  changeInversion(){\r\n    this.options.inverted = !this.options.inverted;\r\n  }\r\n\r\n  /**\r\n   * Clears the interval that controls the scrolling\r\n   * @returns {boolean}\r\n   */\r\n  stopAnimate() {\r\n    if(!this.interval) return false;\r\n    window.clearInterval(this.interval);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Removes the Budgie element from the DOM\r\n   */\r\n  removeBudgie() {\r\n    this.stopAnimate();\r\n    this.budgieContainer.parentElement.classList.remove(`budgie-flex-container-parent-${this.budgieId}`);\r\n    this.budgieContainer.parentElement.removeChild(this.budgieContainer);\r\n  }\r\n}\r\n\r\n// Set Budgie as a global variable for use\r\nif( typeof global !== 'undefined')\r\n  global.Budgie = Budgie;\r\n"]}